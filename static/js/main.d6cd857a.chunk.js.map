{"version":3,"sources":["constants/IMG_2992.JPG","constants/login.png","constants/whitelist.png","constants/trans.png","constants/assets.png","serviceWorker.js","Home.jsx","Projects.jsx","resume.jsx","navBar.jsx","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Contact","className","src","logo","alt","Component","Projects","login","assets","whitelist","trans","Resume","Navbar","Home","getHome","setState","props","changePage","getProjects","getResume","id","this","onClick","href","target","rel","style","fontSize","paddingTop","class","App","mainElement","handlePageChange","newPage","React","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d6cd857a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_2992.675103ce.JPG\";","module.exports = __webpack_public_path__ + \"static/media/login.350d9243.png\";","module.exports = __webpack_public_path__ + \"static/media/whitelist.5ab55aab.png\";","module.exports = __webpack_public_path__ + \"static/media/trans.c0cb0607.png\";","module.exports = __webpack_public_path__ + \"static/media/assets.8b96975f.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport './Home.css';\nimport logo from './constants/IMG_2992.JPG';\n\nexport default class Contact extends Component {\n  render() {\n      return (\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <div className= \"profile-box\" >\n            <div className = \"img-crop\">\n              <img src = {logo} alt = \"profile\" className= \"profile-pic\"></img>\n            </div>\n            <div className = \"inner-box\">\n              <h1>Hello! I'm Helen Gao.</h1>\n              <p >I'm a Junior studying Computer Science at The University of Michigan.</p>\n            </div>\n          </div>\n        </header>\n      </div>\n      )\n  }\n}\n","// General React components\nimport React, { Component } from 'react';\n\n// General function libraries\nimport './projects.css';\nimport login from './constants/login.png'\nimport whitelist from './constants/whitelist.png'\nimport trans from './constants/trans.png'\nimport assets from './constants/assets.png'\n\nexport default class Projects extends Component {\n    render() {\n        return (\n                <div className=\"App\">\n                <header className=\"App-header\">\n                  <div className= \"proj-box\" >\n                    <div className = \"small-box\">\n                      <div className= \"img-box\">\n                        <img src = {login} alt = \"login\" className= \"proj-pic\"></img>\n                        <img src = {assets} alt = \"assets\" className= \"proj-pic\"></img>\n                        <img src = {whitelist} alt = \"whitelist\" className= \"proj-pic\"></img>\n                        <img src = {trans} alt = \"trans\" className= \"proj-pic\"></img>\n                      </div>\n                      <div className= \"text-box\">\n                        <h1>Wallette: Interactive Web App (React/CSS)</h1>\n                        <div>\n                          Wallette is a web app that uses Fortmatic's Magic Link to create a multisignature wallet that allow\n                          users to easily interact with the ethereum ecosystem to start and approve transactions.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </header>\n              </div>\n        )\n    }\n}","// General React components\nimport React, { Component } from 'react';\n\n// General function libraries\nimport './Resume.css';\n\nexport default class Resume extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n            <header className=\"App-header\">\n              <div className= \"profile-box\" >\n                resume page\n              </div>\n            </header>\n          </div>\n        )\n    }\n}","// General React components\nimport React, { Component } from 'react';\n\n// General function libraries\nimport './navBar.css';\nimport Home from './Home';\nimport Projects from './Projects';\nimport Resume from './resume';\n\nexport default class Navbar extends Component {\n    state = {\n        Home: \"active\",\n        Projects: \"\",\n        Resume: \"\",\n    };\n\n    render() {\n        const myStyle = {\n            fontSize: \"22px\",\n            paddingTop: \"23px\"\n        };\n        return (\n            <div className=\"nav-bar\" id=\"nav-bar\">\n                <ul id=\"nav\">\n                    <div>\n                        <li id=\"Home\" className={this.state.Home}>\n                            <a onClick={this.getHome} href=\"!#\">Home</a></li>\n                        <li id=\"Projects\" className={this.state.Projects}>\n                            <a onClick={this.getProjects} href=\"!#\">Projects</a></li>\n                        <li id=\"Resume\" className={this.state.Resume}>\n                            <a onClick={this.getResume} href=\"!#\">Resume</a></li>\n                        <li id=\"LinkedIn\">\n                            <a href=\"https://www.linkedin.com/in/helengaoo\" target = \"_blank\" rel=\"noopener noreferrer\" style = {myStyle}>LinkedIn \n                            <i class=\"fas fa-external-link-alt\"></i></a>\n                        </li>\n                    </div>\n                </ul>\n            </div>\n        );\n    }\n\n    getHome = () => {\n        this.setState({\n            Home: \"active\",\n            Projects: \"\",\n            Resume: \"\",\n            Contact:\"\",\n        });\n        this.props.changePage(Home);\n    }\n\n    getProjects = () => {\n        this.setState({\n            Home: \"\",\n            Projects: \"active\",\n            Resume: \"\",\n            Contact:\"\",\n        });\n        this.props.changePage(Projects);\n    }\n\n    getResume = () => {\n        this.setState({\n            Home: \"\",\n            Projects: \"\",\n            Resume: \"active\",\n            Contact:\"\",\n        });\n        this.props.changePage(Resume);\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './mainPage';\nimport * as serviceWorker from './serviceWorker';\nimport Navbar from './navBar.jsx'\nimport Home from './Home.jsx';\nimport Resume from './resume.jsx';\nimport Projects from './Projects.jsx'\nclass App extends React.Component {\n\n  state = {\n    mainElement: \"Home\"\n  };\n\n  handlePageChange = newPage => {\n    if (newPage === Home) {\n        this.setState({ mainElement: \"Home\"});\n    }\n    else if (newPage === Projects) {\n        this.setState({ mainElement: \"Projects\"});\n    }\n    else if (newPage === Resume) {\n        this.setState({ mainElement: \"Resume\"});\n    }\n}\n  render() {\n      return (\n        <div>\n            <Navbar changePage={this.handlePageChange}/>\n            <div id=\"main\">\n                {this.state.mainElement===\"Home\" && <Home />}\n                {this.state.mainElement===\"Projects\" && <Projects />}\n                {this.state.mainElement===\"Resume\" && <Resume />}\n            </div>\n        </div>\n\n      );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}